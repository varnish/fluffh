package httpfs

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *FileMeta) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "size":
			z.Size, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "uid":
			z.UID, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "UID")
				return
			}
		case "gid":
			z.GID, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "GID")
				return
			}
		case "mode":
			z.Mode, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "Mode")
				return
			}
		case "ino":
			z.INO, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "INO")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *FileMeta) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 5
	// write "size"
	err = en.Append(0x85, 0xa4, 0x73, 0x69, 0x7a, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Size)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	// write "uid"
	err = en.Append(0xa3, 0x75, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.UID)
	if err != nil {
		err = msgp.WrapError(err, "UID")
		return
	}
	// write "gid"
	err = en.Append(0xa3, 0x67, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.GID)
	if err != nil {
		err = msgp.WrapError(err, "GID")
		return
	}
	// write "mode"
	err = en.Append(0xa4, 0x6d, 0x6f, 0x64, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint32(z.Mode)
	if err != nil {
		err = msgp.WrapError(err, "Mode")
		return
	}
	// write "ino"
	err = en.Append(0xa3, 0x69, 0x6e, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.INO)
	if err != nil {
		err = msgp.WrapError(err, "INO")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *FileMeta) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 5
	// string "size"
	o = append(o, 0x85, 0xa4, 0x73, 0x69, 0x7a, 0x65)
	o = msgp.AppendUint64(o, z.Size)
	// string "uid"
	o = append(o, 0xa3, 0x75, 0x69, 0x64)
	o = msgp.AppendUint32(o, z.UID)
	// string "gid"
	o = append(o, 0xa3, 0x67, 0x69, 0x64)
	o = msgp.AppendUint32(o, z.GID)
	// string "mode"
	o = append(o, 0xa4, 0x6d, 0x6f, 0x64, 0x65)
	o = msgp.AppendUint32(o, z.Mode)
	// string "ino"
	o = append(o, 0xa3, 0x69, 0x6e, 0x6f)
	o = msgp.AppendUint64(o, z.INO)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FileMeta) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "size":
			z.Size, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "uid":
			z.UID, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "UID")
				return
			}
		case "gid":
			z.GID, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "GID")
				return
			}
		case "mode":
			z.Mode, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mode")
				return
			}
		case "ino":
			z.INO, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "INO")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *FileMeta) Msgsize() (s int) {
	s = 1 + 5 + msgp.Uint64Size + 4 + msgp.Uint32Size + 4 + msgp.Uint32Size + 5 + msgp.Uint32Size + 4 + msgp.Uint64Size
	return
}
